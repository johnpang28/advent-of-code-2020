package me.jp.aoc

import me.jp.aoc.Day18.Add
import me.jp.aoc.Day18.Multiply
import me.jp.aoc.Day18.RpnToken
import me.jp.aoc.Day18.evaluate
import me.jp.aoc.Day18.input
import me.jp.aoc.Day18.toRpn
import java.util.*

fun main() {
    val operatorsPart1 = mapOf('+' to Add(precedence = 0), '*' to Multiply(precedence = 0))
    val answer1 = input.lines().map { it.toRpn(operatorsPart1).evaluate() }.sum()
    println(answer1) // 98621258158412

    val operatorsPart2 = mapOf('+' to Add(precedence = 1), '*' to Multiply(precedence = 0))
    val answer2 = input.lines().map { it.toRpn(operatorsPart2).evaluate() }.sum()
    println(answer2) // 241216538527890
}

typealias RpnExpression = List<RpnToken>

object Day18 {

    interface RpnToken
    data class Operand(val number: Long): RpnToken

    interface Operator: RpnToken {
        val precedence: Int
        fun doOp(a: Long, b: Long): Long
    }

    class Add(override val precedence: Int): Operator {
        override fun doOp(a: Long, b: Long): Long = a + b
    }

    class Multiply(override val precedence: Int): Operator {
        override fun doOp(a: Long, b: Long): Long = a * b
    }

    // https://en.wikipedia.org/wiki/Reverse_Polish_notation
    fun RpnExpression.evaluate(): Long {
        val stack = Stack<Long>()
        forEach {
            when (it) {
                is Operand -> stack.push(it.number)
                is Operator -> {
                    val b = stack.pop()
                    val a = stack.pop()
                    stack.push(it.doOp(a, b))
                }
            }
        }
        return stack.pop()
    }

    // https://en.wikipedia.org/wiki/Shunting-yard_algorithm
    fun String.toRpn(ops: Map<Char, Operator>): RpnExpression {
        var output = emptyList<RpnToken>()
        val opStack = Stack<Char>()

        filter { it != ' ' }.forEach { c ->
            when {
                c.isDigit() -> output += Operand(c.toString().toLong())
                ops.keys.contains(c) -> {
                    val op = ops.getValue(c)
                    while (opStack.isNotEmpty() && opStack.peek() != '(' && ops.getValue(opStack.peek()).precedence >= op.precedence) {
                        opStack.pop()?.let { output += ops.getValue(it) }
                    }
                    opStack.push(c)
                }
                c == '(' -> opStack.push(c)
                c == ')' -> {
                    while (opStack.peek() != '(') opStack.pop()?.let { output += ops.getValue(it) }
                    opStack.pop()
                }
                else -> throw RuntimeException("Bad token: $c")
            }
        }

        while (opStack.isNotEmpty()) output += ops.getValue(opStack.pop())

        return output
    }

    val input = """
        5 + 6 * 9 + 5 + 5 + (7 * 2)
        2 + (3 + 7 + 7) * 5 + 9 + (5 + (4 + 5 + 3 + 6) + 8 * 5 + (7 + 4 + 7 + 6 + 9) + 9)
        (5 * 4 + 7 + 4 + 8) + 9 * ((5 * 4) + 2 + (6 + 2 + 8 + 7 + 4 + 5)) * 5
        4 * ((4 + 9 + 3 * 3 * 5) * 3 + 2 + 2 * (9 * 2 + 3)) + 5 * ((8 * 3 * 6) + 9 * 4 + (5 + 4 * 7 + 7)) * 7 * (9 + 2 * 2)
        5 * 6 + ((8 + 9) * 5 * 9 + 4 + (9 + 3 * 9))
        (3 * (3 + 3) * 9 + (6 + 9 * 8) + 5) + 5
        6 * (9 * 6 * 9)
        4 * 3 + (9 + (8 * 2 * 3 * 4) * (6 * 8 + 5 + 3 + 4)) + (3 + 7 + (7 * 6 + 2) * 6 + (4 + 6 + 5) * (3 + 7)) + 6 * (8 * 6 + 7 * 8 * 9 + 2)
        5 * (2 + 3 * 4 + 3 + (4 * 4 + 3))
        9 * 2 * (5 * (8 * 7 * 3))
        (6 * 9) * 6 + 7 * 8 + 5
        5 * 4 * 9 + 6 * 9 * (4 * 7 * 2 * 3 + 6)
        3 + 9
        2 + 6 * 7 * (8 * 3 * 5 + 7 * (7 * 8 * 6)) * 3
        5 + 6 + (8 * 4 * 7 + 2 + 4 * 5) * (3 * 9 + 3 + (3 * 2)) * 9
        4 + 7 * 7 * 2 * (2 * 6 + (9 + 4 + 8))
        4 + 4 * (7 * (5 + 3 + 8 * 6) + 9 + (4 * 7 + 9 + 3 + 4) + 6) + 5
        5 * (4 + 8 * (8 * 5 + 5 * 6 + 2) * (9 * 4 * 3)) + 6 + 5
        3 * ((3 + 5 * 7) + 8 * 2 * 5) + 5 + (3 + 7 * (5 * 9 + 3 + 7 + 7) * 2)
        2 + (5 * 7 + 9) + 2 + 2
        ((3 * 9 + 6) + 7 + 7 + 8 * 6) + 5 + 5 + 9
        (8 + 3 * 6) * 7 + 2
        9 + (9 * 7 + 7 * 4 * 7 * (6 * 7 * 3)) + 3
        (3 + 7 + 7) + (5 + (2 * 9 * 3 * 2 * 5 * 3) + 7 * 5) + (7 + 9 + (2 + 7 * 7 * 7)) + (3 + 4) + 5 + (9 + (7 * 8 * 3 + 2 + 3 + 7) + 7)
        2 + 4 * (8 * 2 * (8 + 8 * 8 * 3 + 3 + 8) * 2) * 8 * 3
        9 + 4 * (5 + 7 * 4) + 2 * (3 + (9 + 3 * 7 + 5 + 5 + 6) + 4 * 7 + 5)
        5 + ((4 * 3 * 5) + (2 * 4 + 2 + 9) + 5 + 6 * 9 * 3) + 2 + 2
        ((6 * 8 + 8 + 2) * 4) + 5 + 3 + 4 * 4 + 9
        7 * (9 + 7 + 4 * 6) + 5 * 6
        (7 + 7 * (7 + 8)) + 7 + 7
        9 * (5 + (7 * 6 * 9 + 5 * 3 * 3) * 2 * 4 * (5 + 8 * 8 + 4 * 9) + 3) + 2 + 6 * 4 + (9 + 7 + 2 + 4)
        4 + (7 * 6 + 5 + 7) + 8 + 8 * 4
        4 + (3 + 3 + 7 * 6 + 3) + (6 * (6 + 8 * 2 + 9 * 4) + 4) + 3
        ((7 * 7) + 4 + 6 + (6 * 4 * 4 * 9 * 5 * 2)) * ((6 + 8 + 9 * 6) + (4 + 5 + 9 * 3) + (3 + 9) + 8)
        (7 + 7 + 6 + 6 * (2 + 2 * 7 * 9)) * 4 * 6 + 3 * (3 * (5 * 3 * 3 * 3 + 3) * (3 + 7 * 9) + 8 * 6 + 8) + 8
        (6 * 9 + 8 * 4 + 6) + 8 * 6
        8 + 2 * (9 * 2 * 7 + 9 * 8) + 2 * 3
        ((7 + 7 + 8) + 6 * 7 * (6 + 3 * 7 + 7 * 9 * 4)) + 7 * 7 + 5 + 3
        7 * 2 + (8 * 8) * 8 * 5 * (5 * 2 * 2)
        (8 * 7 + 9) * 2 + 6 * 8 * 2 * 2
        9 + ((9 + 9 + 2 * 4 * 4 + 6) + 8 + (3 + 3 + 5 + 6 + 9) * 7) + 8 + 5 + 4 * 7
        4 + 7 * (5 * 4 + 7 * 7 + 6)
        (6 * 4 + 2) * 8
        3 * 7 * 8 + (5 * 9 + 2 + 2 + 4)
        (3 + (2 * 6) * 5 * 3 * 3 * 5) + (5 * 6 * 7)
        8 * 2 * 7 + (6 + 6 * (5 + 7)) * 8
        (2 + 8) + (9 + 9 * 5 + 2 * 8 + 7) + 7 + 9 + 6 + 3
        2 + ((4 * 7 + 5 + 6) + 2)
        4 + 4 * (3 * 7 * 4 * 6 + 3) * (8 + 5 + 5 * 6 + 6 + 7)
        9 * (9 * 9 + 6) * 8 + 7 + 9 * 7
        (7 + (5 * 8 + 2 + 2) * (8 * 3 * 4 * 3 + 4 + 2)) + (8 + 6 * (2 * 3)) + (7 + 6) + ((9 * 6 * 9 + 8) + 5 * 6 + 9) + 8 * 3
        (9 * 5 * 7 + (9 + 5) + (2 + 5 + 9 + 2 * 6 + 8)) * (7 + 6 + 3 + 4) + 8 + (2 * 8 + 7) * 2
        ((5 * 6 + 2 + 3 * 9 + 5) + 4 + 8) * 7 + (3 * 7 * 2 * 4 + 3)
        4 + 2 * (3 * 5 * 3 + 4)
        (2 * 3 + (4 * 4 * 5) + (2 + 7) * 8 + 2) * 3
        5 + ((7 + 7) + (6 + 6) + 2 * 3) + 4 * ((9 * 2) * 3 + 3 + (4 + 8 * 7 + 3 * 6) * 6)
        ((3 * 2 * 5) + 4 + 4 * 8) * (2 * (7 + 9 + 4 + 6)) + 7 * (9 + (9 + 6 * 4 + 6 + 2 * 4) * 3)
        4 * 3 * (9 + (8 + 5 + 6)) + 7 * 4 * ((4 + 2) * 9 + 6 * (5 + 4) * 6)
        4 + (7 + 7 * 6 + 3 * 9) * ((4 + 2 * 4 + 4 + 9 + 7) * 5 * 9 * (3 + 7 + 4 * 4) + (4 * 8 * 7)) + 3
        (2 + (5 * 8 + 3) * 9 + 5) * 9 * 7 + (6 + 2 * 8 * 2)
        9 * (8 + 8 + (4 + 4 + 2 + 7)) + 6 * 5
        6 * 9 + 2 * (8 * 5 * 5) * (2 + 4)
        3 * 3 + 4
        3 + 3 * ((4 * 4 * 4) + (2 * 5 * 9 * 4 + 4) * 9) * 9 * 5
        (3 + (5 + 7) + 4 + 4 * (4 * 2) + 3) + (3 + 6)
        6 * ((5 + 6 * 4 + 9 + 4 * 9) * (2 + 8)) * 6 + 8 * 6
        8 * ((2 * 3) + 9) + 2 * 6
        5 * (3 * 7 + (7 + 9 * 3 + 8 * 4) + 9 + 5) * 4
        4 * (5 + 2 + 3 * 2 + 4 + 9) * 4 * (2 + 6 * 2 * (4 + 9) * (8 + 6 + 4 * 4 + 7)) + 5
        7 * ((7 * 8 + 2 + 4 + 7) + 9 + 7 * 7 + 5) + 2 + 9 + 3 * 3
        (7 + 2 * 2 + (9 * 6 * 4)) * 8 * 9
        4 * (5 + 5 * 2 * (4 * 7) + (9 + 9 + 6 * 6 + 8 + 9) + 2) + 6 + 2
        2 + 6 + (7 + 9 * (3 * 4 * 3 * 5 * 7) + 7 + (7 + 5) + 2) + 5 * (7 + 9) + 9
        9 * (3 * (7 + 5) * 8 + 6) * 9 * 2
        2 * ((2 * 9 + 7) * 3 + (2 + 4 * 8) + 6 * 6)
        2 * 7 * ((6 + 7 * 5 * 3) + 9) + 9 + (8 * 8 * (9 * 2 + 2 + 3 + 3) + 2) * 2
        ((8 + 7 * 5) * (2 + 7) * (7 * 8 * 9) * 6 * 2 + 5) + 8 + 6
        (7 + 3 + 5 + 6 + (7 * 9) + 2) * 5 * 7 + (2 + 5 * 3) + 8 + 4
        ((5 + 6 * 8) + 4 * (5 + 6 + 5 * 4) + (5 + 8) + (5 * 6)) * 3 * (4 + 5 + 6 * 5 * 5 * 2) + 3 + (3 * 8 * (3 * 6) + 8 * (6 * 2 * 2 * 3 * 9 * 9) * 7) + 2
        3 * 3 * (9 * 2 + 7 + 9 * 5 * 7) * 9 * 3
        9 + 4 + (5 + 7 * 5)
        8 + (6 + 4 * 5 + 8 * 4) * 6 + (8 + (6 * 6 * 8 + 3 * 9) * 8) + 4 + 3
        (8 + 4 * 3 * 4 * (6 + 5) + 9) + 3 + 5 * 9 + 7
        (8 + 6 * 8 * 3) * 2 * 7 + 6 * (9 + 2)
        7 * 7 + (5 + 9 * 6) + 7 + (7 + (7 * 8 + 5 * 3 * 5 * 4) * (9 * 7)) + 5
        7 * 8
        5 * 6 * 4 + (3 + 4 * 6 * 6) + 3
        8 + ((4 + 2 * 6 + 2) + (7 * 9 + 9 + 7 * 6))
        6 + (6 * 8 + 6 + 5 + 6) * 5 * 9
        7 * ((8 * 6 + 3 * 7 * 9 + 2) * 4 + 5) * 8
        2 + 5 + (8 * 8 + 4 + 8) + 2
        4 + 3 + 7 + 5 * 8
        6 * 4 * (6 + 8 + (8 * 4 + 9) + 4 * (7 * 6 * 4) + 3)
        6 + 8 + (4 * (5 * 4) * 4 + (2 * 3)) * 4 + 3 * (2 * 9 * 5 * 4 * (8 + 3 * 3 + 8 * 7 + 9))
        5 + (7 * 3 * 6 + 3 * 2) * ((7 * 3 + 5 + 8) + (9 + 8 + 5 * 4 * 7)) + ((5 + 4 * 3) + 4 * 7) + 2 * (8 * (8 + 7 * 7 + 3 * 6) * 4 * 7 * 4 * 3)
        9 * (6 * 4 * 2 + (7 + 9 + 7 * 2) + 3 + (5 * 7 + 4)) + 6 * 2
        (5 * 2 + 7 * 2) + 9 * (3 * 4 * (5 * 2) + 4) * 4
        (2 * (6 + 9 + 4 + 3) * (9 * 6) * 2) * 8 * 5 * 5 + 6
        3 * 9 + 9 + 9 * (9 + (8 * 2 * 7 + 3 * 8 + 3)) + 3
        8 * 3 * 2 + (7 + (3 * 2 * 2)) * (2 * (2 * 4 * 4) * 8)
        3 + (9 * (7 + 9) + 6 * (3 + 4 + 5 + 5 * 2 + 9)) * (6 + 4 + (6 + 5 * 6 + 6 * 5) + 2 + 2 * 6)
        ((7 * 3 * 3) + 7 + (3 * 4 + 5 * 4 + 7)) + 8 * 3 * 9 * ((7 * 3) + 8 + 7) * 9
        ((2 * 3 + 2 + 9 + 4) + (9 * 2 * 4) * (6 * 5 + 9 * 2 * 7 + 7) * 7 * 9) * 6 * 4 * 5 + 7
        9 * 2 * 2 + 2 + (3 + 3 + 6 * 2)
        (7 * 6 * 6) * 2 + 9 + 8 * (7 + 3 + 8 * 7 + (4 + 5 + 3) + 8) + 9
        2 + 6 + 9 * 3 * (6 * 4 + 9 * 5 + 2)
        5 * (5 * 2 + 6 + 8 * 8 + 7) + 9 * 5 + 9 * 3
        9 * (8 + 9 + 8 + (9 * 6))
        (4 + 8 * 8 * 6 + 4) + 7
        2 + (8 * (4 * 2 + 6 + 2 + 3 + 6) + 4 * (7 + 4) + 6 * 2) + 8 * 5 * 6 * 8
        ((5 * 7 * 9 * 5 * 8 * 3) * 5) + 5 * 2 * 3 * 7 + 5
        8 + 4 + 8 + 7
        3 + 3
        9 + ((4 + 7 + 8) + 3) + 8 + 9 * 5 * (6 * 5)
        (2 + 2) + 9 + 8 + 5 + 6 + 7
        3 + 8 * (7 * 5) + 9
        5 + (5 + (8 + 3 * 3 + 9 * 7 + 3)) * ((9 * 5 * 8 + 2 + 2 * 7) * 4 * 6 + 4 + 6 * 9)
        (6 + 5 + 6 * (9 * 2) * 6 * (4 * 5 + 8 * 9)) + 6
        2 * 4 + ((9 * 2 + 6 + 8) + 4 * (5 + 3 * 3 + 7 * 9 * 6) * (6 + 6 + 4 * 3 * 8) + 7) * 5
        (6 + 4 * 2 * (8 + 3 + 4 * 4 * 5)) * ((4 * 2 * 5 + 9) * 8 + 3 * 7 * 8) + 7
        ((5 * 6) + (2 * 2 * 8)) * (3 * 4 * 2 * 3) * 6 + 5 + 7
        2 * 2 + ((5 + 6 * 7 + 5 * 8) * 7 * 7 * 4 + 8) + 6
        2 + (7 * 4 * 7 + 8 + (8 + 5 + 4 * 9)) * 8 * 2 * 6
        8 * 4 * ((2 * 8 * 9) * 9) * 8 + (8 + 2) + 9
        (5 * 9 * (8 + 7 * 3 + 9) * (4 * 6 + 5) * (7 + 2 * 6 + 5 * 2 * 2) * 4) + 5 + ((7 * 6 * 8) * 9 + 8)
        2 * 7 * (9 + (5 * 2 + 9) + 5 + 4 * 3 + 8) * 6 + (8 + 4 * 9 * 4 * 8 + 4) * ((9 + 6 + 2 * 4 * 8 + 3) * 7 * 8)
        (8 + 3 * 7 + 7 + 5 + 7) + (6 + 8 * 3 + 8 + 7 + 6) + (5 + 6 * 7 + 6 * 2 * 7) * 6 + 3
        8 * 5 + 7 + 5 + (2 + 4 * 5 + 2 * 5 * 8)
        3 + (8 * 5) + 4 * 2 + 7 + (6 * 7 * 8 * (4 * 5 * 5) + 2 + (4 * 8))
        5 * (7 * 5 * (5 * 4 * 5) + 4 + 4)
        5 * 9
        (5 * 9 + 5 * 4) + 4
        3 + 8 + 9 * (5 + 9 + 9 * 8) * (3 + 3 + 4 + 6 * 3 + 9) * 3
        (7 * 9 + 6 + (4 + 7 + 7 + 7) * 3) + 3 + 2 * 3 + 8 * 5
        6 + 6 * 6 + 8 * 9 * 6
        (8 + 6 * 5 * 4 * 4 + 3) * (8 + 6)
        2 + 9 * 2 + 3 * ((9 * 3 * 3 + 8 * 4 * 9) * 3 + 7 + 6 + (2 + 6) * 6)
        (5 * 6 + (2 * 3) + (6 + 8 * 6 * 9 + 7) + 6) + 8 * 3 + ((2 * 4) + 6 * (2 * 8) + (3 * 8 + 3) * 3) * 7
        4 + (2 + (8 * 5 + 5 * 9 * 7 + 5)) * 4 * 4 * 7 * 9
        7 + 8 + 6 * (8 + 3 + (9 * 2) + 8 + 8) + (4 + 2)
        (9 + 4) + (3 * 4) * 6
        ((8 * 5) * 3 + 4) * 3 * 7
        8 * ((8 + 5 + 7 * 6 + 2) * 7 + 5 + 4 * (2 + 3 + 6 + 6)) * 3 * 5 * ((3 * 5) * 2)
        7 + 4 + 9 * (3 + 9 * 2 * 8 + (9 * 3)) + 9
        ((8 * 8 * 3 + 9 * 4 + 7) + 8 * 7 + 6) + 5
        7 * 8 * 7 + 4 * (6 * 5 + 6) * 8
        3 * (8 * (4 + 8 + 4 + 9)) + 3 + (8 + (8 + 8 + 5 * 6) + 5) * 8 * 7
        9 + 4 + 9 * (7 + 9 + 2)
        4 * 9 * 3 + 3 * (3 + (7 * 2 * 7 * 7))
        (8 * (3 * 8 + 9 * 4 + 2 * 8)) * (2 + (5 * 3 * 6 * 5 + 3 * 4) + 8 + 2)
        6 + 7 * 9 * (7 * 3 * (8 + 2 * 9 * 3) * (4 + 7) * 9)
        7 + 3 + (6 + 3 + 9 + 6 + (4 * 9 * 5 + 7 * 9 + 7))
        3 * 6 + (5 * 7 * (9 + 6 * 8 + 8 * 8 * 5) + 5)
        4 * ((4 * 9 * 5 * 2) * 8) * (4 * (5 * 6 * 3 * 2) + 2) * 6 + 3 + 4
        9 + (6 + 4 + (8 + 7 + 9 * 3 * 6 * 8) * 6) + (2 * 8) + 5
        9 + 9 + 8 * 9 + 9 + 4
        ((7 * 6 + 3 * 9) * 6 + 9 * (8 + 6 + 4 * 6 + 4 + 5) * (4 * 6 + 6 * 7 + 5 + 2) + 4) + 7 + 3 * 5
        ((3 + 4 + 4 + 4 * 2) * 8 + 6 + 6 * (7 + 8 + 4)) + 5 * 6 + 7 + 3
        (9 + 8 * (7 * 9 * 3 + 5 * 6) * 7 * 9 * 3) * 4 * 7 * (9 * 9) + 5 + (5 * 2 * 7)
        8 + 3 * 9
        (4 * 6 + 3 + (2 + 7 + 5 * 3) + (4 + 9 + 6 * 5 + 4)) + (7 + 2 * 4 + 3 * 8 * 7) + 9 + 2 + 6
        9 + 9 * (2 * 8 * (3 + 3 * 4 * 2)) * 3
        6 + (2 + (4 * 3 + 8 + 5 * 3) + 8 + 2 * 6 + (8 + 4)) * 9 + 8 * 4
        (2 * 4 * (2 * 5 + 8 + 6) + (6 + 5 + 7 * 6 + 3 + 3) * 6 + 4) * 6 * 7 * 2 * 6
        6 * (9 + 8 + 2 * (4 * 5 + 5 * 9 * 2 + 7) * 4 * 5) * 3 * 6 + 8
        2 + 8 + 8 * (4 * (2 * 6 + 8 + 2 + 4 * 4)) * 7 + 6
        ((8 * 6 + 2) + (4 * 5 + 6 + 2 + 3 + 9)) + (3 + 7) * 2 + 2
        7 + (4 * 8 * 7) * 8 + (2 * 2 * 3 * 4) + (2 + 7 + 9)
        (5 * 5 * (6 * 6 * 8 + 7) * 6) + 8 * (7 * (8 * 6 * 7)) * 6 * 5
        3 * 3 * (2 * 6) + 3 + (4 + 5 * 2 + 7 + 8 * 9) * 4
        6 * 8 * 6 + 4 * (5 * 2 * 6 + 4 + (7 + 9) + 7) + 3
        (8 * 7 * 3 * 6) * (7 + 7 + (7 * 2) + 8 * 3) + 7
        5 * (2 * 8 * 4 + 2 + 9)
        4 + 5 * 3
        3 + (5 * 8 * 6) * (8 * 5 * 5 * (3 * 7 * 5 + 6) + 6 + 2) + 2 * 5 + 4
        4 + 2 * (5 * 5 * 2) + (7 * 3 + 5 + 3 * 8)
        (4 + 7 + 4 + (6 + 7 + 7)) * (4 * 2 * 2 + (8 * 8 * 6 * 6 + 3)) * (8 + 8 * 5 * 2 * 8)
        5 + 2 * (2 * 4) * (2 * 6) + 4
        6 + 5 * (8 + 4) * 4 + 8 + 7
        4 * 3 + 7 * 4 * 5 + ((5 * 6 + 9 + 5) + 6 * (7 + 2 + 6 + 4) * 8 + (6 * 9 * 9) + 7)
        4 + ((9 * 8 * 2 * 8 + 8) + 5 * 3) * 8 * 2 + (5 + (2 + 7 + 3 * 4 * 8 + 2) + 4) + 8
        8 * (6 * 9) * 9 * ((5 * 2 + 2 + 8 * 2 + 3) + 9 * 8 * 7 * 3 + 8) + 6
        7 + (6 * 5 * 2 + 4 * 5 + (5 * 7 + 8 * 6 + 8)) + 2 + 8
        (8 * 6 * 3 * (2 + 4 * 6 + 2) * (5 + 9)) + 3 * 6 * (7 * 9)
        (4 + (2 + 6 * 6 + 4 * 9 * 9)) * ((2 * 7 * 3 * 9) + (6 * 5 + 8 + 5 + 9) * 8 + 5 + 4 + 5) + (9 + 8 * 8 * 5 * 5 + (9 * 6 * 5)) * 9
        9 * ((7 * 7) + 7 * 9 + 7 + 2) + 5 + 5 + 6
        5 + 7 + (2 + 4 + 8) * 3 + 3
        8 + (9 * (3 * 8 + 8 + 9) * (7 * 8 * 2 + 3 * 2 * 2) * 3 * 6 + 7) + 9 + 7 + 5 + 5
        (7 + 8 * 7) + 7 * ((5 + 4 * 9) * 7 + 6 + 6 + 7 + (3 + 9 * 6 * 3 + 3)) * 5 + 5
        (4 + 4 + 4 * 4 + 4 * 7) * 4 * ((3 * 4 * 6) + 5 + 2) + 6
        6 + (2 + 4 + 2 + 4) * 2
        6 + ((4 + 4 * 4 + 3 + 8) * 4 * 4 + 6) * 7 * 3 * 4
        6 * 5 + 2 + 7 + 8 * 6
        9 * 2 + (5 + 8 + 6 * 3 * 9 * 5) * 5
        8 * 7 + 5
        (8 * 8 * (7 + 8 + 4) * 8 * 2) + 3 * 4
        3 + ((9 * 7 * 4 * 3 + 4) + 8 + (3 * 4 * 7) * 5 + (3 * 5 + 7 + 2) + (4 + 9 + 9)) * 3 + 7
        (3 + 6) * 3 + 6 * (7 * 8 + (7 + 9 * 4) + 6) + 8
        9 + (2 + 8 + 3 * 9 * 4) + (8 * 9) + 7 + 2 + 2
        4 * ((9 * 3) + 2)
        7 + (7 + (9 * 3))
        6 * 4 + 5 * (4 + (4 + 5 + 4 + 9 + 3 * 2) + 9 + (6 * 2 * 4 * 6 * 8) + 3) + 9 * (6 + 5 + 9)
        4 * 6 * (3 * 6 * (3 * 5 * 4 + 9)) * ((3 + 6 + 4) + (7 * 2 * 5 * 9 + 4 + 4))
        ((9 * 4 + 8 + 6 * 3 + 6) * 8 + 8 + 2 * 6 * (6 + 5 * 4)) * 5 + 6 + ((9 * 8 * 4) + 9 + 8 + 9 * 2 * 6) + 8
        7 + 8 * ((2 * 7) + 9 * 8 + 8 + 9) + 9
        (9 + 2 * 6 * (8 + 5 + 8 + 5) * 7) * (6 + 9 * 6 + 8 * 9 * 7)
        (7 + 5 + 8 * 4 + 8 + 5) + 5 * (3 * 2 + 7 + 5 + 8) * 9 * 6 * 8
        7 * 2 * 3 + 6 + (8 * (3 * 6) + 6 + (6 + 4 * 9 + 5 * 7 + 9))
        7 * (6 * (5 * 7) * 8 + 5) * (2 * 5 + 7 * 3 * 3) * 7 * 3 * (7 * 2 * 8)
        9 * 2 + 8 * (7 * 4 * 8 * 2 + 4 * (9 + 2 + 6)) + 2 + 7
        4 + (3 + 8 * 9 + 7) + 2 * 8 * 6 + (7 * 8)
        (3 * (2 + 6 * 2 + 9 * 5) * 9) + 4 + 2 * 7
        4 * 4 + 8 * 3 + 7
        (2 * 8 * (2 * 3 * 5 * 9 * 6 + 7) * 4 * 6 * 8) + 3
        2 * (9 * 7 + 5 + 4 + (3 + 7 + 6 + 8 + 5)) * 8 * (3 * 7 + 7) + 9
        8 + 9 + 7 * 9
        ((3 * 2 * 5 * 6 * 7) + 6) * (3 * 9 * 4 * 4 + 6) * 2 + 8
        (4 + 3) * (3 * 9 * 4) + 5
        8 + 2 * 6 + 6
        (8 + 4 * 3 + 3) * (8 * (7 + 6 + 6) + 7 + (9 + 9 * 5)) * 8 + 2
        8 * 4 + 2 * 6 + 9 + ((7 * 5 + 5) + 2)
        (6 + 9 + 8) + ((4 * 3 + 9 * 6 + 3) * 3 + 3 * 4 * (5 + 5 + 6)) * 6 + 9 + 7 * (6 + 8 + 5 * 5)
        (6 + 9 + (5 + 2) * (9 * 4 * 5 + 9 + 3 + 9) + 3) * 8 + 8 * 7 + 3
        (9 * 6 + 9 * 7) + (5 * (7 + 6 * 7 + 2) + (6 + 8 + 9 + 4) + 2 * 4) + (2 + 6 + 4 + 7)
        4 + ((2 * 5 * 7 + 8 + 7 + 7) * 6 + (6 * 2 * 2 * 9) + 8) * 4 * 3 + 3 * 5
        5 + (8 + 8 * 2) + 3 + 5 + (7 * 8 * 9 + 2) * 2
        ((5 + 7 * 7 * 6) * 9 * 2) * 3 * 2 + 9 + 7 * (6 + 4 + 6 + (5 * 8 * 2 + 8 + 2) + 9 * 7)
        7 * (2 + 3 + (5 * 9 + 8 * 9 * 5 + 4) + 4 * 8)
        (8 * 7 + 8 + 8) + 7 + (4 * 7) + 4 + 8
        6 + 6 + 4 * 8
        6 + 5 + 9 + 4 + 5 * (8 + 5 + 2 + 4 + 9 + 7)
        (2 * 9 + 3 + 7) * 9 * 7 + 8 + 9
        (2 + 7 * 3) + 7 + 8 * 4
        9 + (5 * 2) + 6 + 8 + ((5 + 2) + 7)
        8 * 9 * 6 * (9 + 9 + 4 * 8 + 7 * 5) + 7
        ((3 * 9 + 6) * 2 + 2 + 6 * 6 * 6) + 4
        4 * 4 * 7 + 5 * 8 + 2
        9 * (3 + (3 + 7 + 6 * 3 * 8))
        6 * 6 * 9 * (3 * (5 + 9 * 9) * 8 + 9 * 8 + 2) + 4
        (3 * 9 * 4 * 8) + 5 + (9 * 5 * 5) + 7 + 2 * 4
        5 * 8 * 4 * (5 * 6 * 8) * 3 * (2 + 2)
        (8 + 6 + 3) + 7 + (5 + 9 * (9 + 7 + 4) * (2 * 5 * 6 * 8) + 4) * 5 + (9 * (5 + 6 + 6) * 8)
        7 + 2 * 4 + 7 * 3
        2 * 7 * 2 * (4 + 6 * (4 + 7) * 9 + (9 * 4 + 9 + 4))
        (8 + 6 * 4 + 9 * 7 + (7 * 9 + 5)) + 2 + 2
        3 + 2 * 3 + (2 + 6 + 6 + (8 * 9 + 4 + 9 + 8 + 9)) * (2 + 4 + 7 * 3 + 6 * 2)
        5 * 7 * ((7 + 9 * 8 * 7) + 8 + 9) * 5 * 7 * 2
        3 * (6 * 5) * 2 * 6
        6 * (4 * (2 * 2 + 2 + 3 + 7) * 7 + 9 * 6) + 3 + 6
        8 * 6 + (9 + 7) + 4 + ((4 * 2 + 9 * 2) + (5 * 5) + (7 + 5 + 6) * (5 * 5 * 8 + 8 * 5 * 5) + 6) + 4
        8 + 9 * 3 * 9 + ((9 + 3 + 8) + (8 + 8 + 3 * 3) * 2 * 3 * (4 * 9) * (6 * 6 + 9 + 3 + 4))
        5 * 3 * (6 * (9 + 5 * 8) * 9)
        9 * (9 * 4 + 4 + 7) + (6 * 4 * 6) * (3 * 8 * 3 + 4)
        (9 + 7 + 6 + 8 * 3) * 7 + (2 + 7) + (2 + 7 * (5 * 3 + 9) + (6 + 8 * 4 + 4 + 2 * 5))
        9 * ((8 * 5 * 5 + 5) * (2 + 7) * 9 + (4 + 5 + 3 + 2 * 5) + 2 + 5) + 9 * 4
        6 + ((2 * 6 * 8) * 3 * 4 + 3 + 7) + 8 + 2 + 7 + 3
        4 + (8 * 9 + 7 + 6) * (7 * 7 + 6 + 2 * (6 * 6 * 4 * 6 * 9) * 8) + 2
        (9 * (8 + 9 + 5 + 8) + 7 * 6 * (9 * 3 + 5 + 3 + 2)) + (2 + (2 + 4 * 5) + 6 * (6 * 3 + 7 + 7) + 2) + 7 + 8 + 6
        3 + 5 + 5 * 5 + ((6 * 7 + 9 + 4 * 2) * 6 * 8 + 6)
        (2 + 8) * 3 + 7 * 6
        4 + 5 + (8 * (5 * 8 + 4) * 9 + (6 * 6) + (5 + 7)) + 2
        6 * 7 + 5 + (9 * 2 + 2 * 7 * 4) * 2 + 2
        3 * (3 + (3 + 9) + 3 + 9 + 3) + 6 * 8 + 5 * 4
        8 + ((8 * 6 + 5 * 6) + 7 + 3 * 8 + 9 * (2 + 6 + 3 + 8 + 6))
        5 * 8 + (7 + (9 + 3 + 3) * 6 * 4) + 9
        2 + 4 + 5 * 2 * 9 * (4 + 9 * 3)
        2 * 6 + (4 * 7 + 6) + 9 + 9 + 4
        (7 * 9 * 4 + 3) + 9 + 6 * (7 + 6 * 8) + 9
        6 + (4 + (3 + 3 + 6 + 2) + (4 + 9 * 7 + 4 + 8) * 5 * 5) + 4
        4 * 7 + (2 + 2)
        (3 + 2 * 8 * 8 + 3 + 3) + 5 + 7 * 5
        (2 * 5 + (8 * 6 + 2 + 4 + 4 + 8)) * 2 * (8 + 8 * 5) + (2 + 9 * (9 * 3) * (6 * 7 + 7) * 2 + 4) * 6
        5 + 2 * 9 * 8 + 5 * ((7 * 8 + 3 * 6) + 2 * 6 + 2)
        7 * 2 + (8 * 5) * 7 + (2 + 2 + 4)
        5 * 6 + 8 * ((2 + 3 + 6 + 8 * 8) * 8 + 5)
        4 + 4 * 4 + (7 * 4)
        (7 * 3 * 4 * 8) + 3 * 2 + 8 + 2 + 3
        2 * 8 + (2 * 4 * 6 + 8) + 2 * 7
        (5 + (7 + 5) + 6 + (7 + 7 + 7 * 8 + 5 + 4) + (8 * 8)) + 8 * (7 * 9 + 8) * 6 + 3 * (9 + 6 * 3)
        9 * 9 + ((6 + 4 + 6 * 6) + 9 + 6) * (8 + 4 + 4 * (3 * 3 + 8) * 3 * 9) + 6 * 2
        (9 + (8 * 7 + 4 * 5 + 8 + 9)) * ((2 + 8 * 2 + 2) * 8 + 2) * 9 + (2 + 9) + (2 * 4 * (3 + 4 * 3 + 7 * 4 * 7))
        2 * 6 * 3 * 7 * (4 + 6 + 8)
        5 * 8 + (6 * 5 * 5 + 9 * (9 * 2 * 2 * 5 + 5 * 4)) + 4 * 2 + 8
        (9 + 7 + 5) + 2 + 9 + 2 + (6 * 9 * 9)
        9 + ((7 * 4) + 9 + (3 * 5)) * 8 * 6 * 6 * (3 + 3 + (8 * 9) + 7)
        5 + 4 + 3 + 3 * 9 * 5
        6 + 6 + ((5 + 4 + 6 + 9 * 5 + 4) * (8 * 9 * 8) + 3 + (8 + 2 * 4 + 4 + 3)) + 9
        3 + 5 * 4 * 3 * (5 * 3) + 9
        2 * 5 * 3 + 6 * (8 + (5 * 4 + 4 * 7 * 6 + 8) + 4 * 7) * 6
        2 * ((3 * 2) + 7 * 9 + 7 + 8 * 6) * (9 + 8) * 8 * 8
        3 * ((7 * 6 + 9) + (8 * 9 + 9 + 2 + 3)) * 5 + 2 + (3 * (6 * 6 + 7 * 9 + 8 * 9))
        3 * 3 + (8 + (8 * 6 * 9 * 8 + 5 + 3) + 5 * 2 * 5 + 7)
        3 + (6 + 5 * (4 * 2) + 8 * 3 + 6)
        7 + 7 + 7 * 6 + 3 * ((2 + 5 + 4 * 9 + 2 * 9) * 5 * (8 * 4) + (9 + 5 * 8 + 8 + 6) * 4 * 5)
        9 + (6 + 6 * (7 * 4 + 2 * 8 * 5))
        (7 + (5 + 3 + 5 + 6 * 5)) * 8 + 9 * 8 + 5
        (6 * 2 * 7) * (3 + 3 * 7 + (8 * 3 + 7 * 4 + 5)) + 7 * 3 + 4 + 2
        4 * 9 * 3 + (3 * (3 + 4) * 3) * (2 * 5) + (4 + 4 * 2 * 4 * 7)
        (8 + (6 * 7 + 5 * 3) + 5 * 4 + 7 * 8) * 3 + (6 * 9 + 7)
        5 * 6 * 5 + 4 * 9 + (3 + 3 + 8 + 4)
        (6 + 4 + 7 * 8) + 5 * 4 * 9
        8 + (7 + 5 * 4 + 8 + 9 * 6) * 8 + 4
        3 + 6 * 8 + 3 + (3 * 3 + 2 * 9) * 8
        7 + 6 * 4 + 4
        9 + 3 + ((2 + 8 * 5 * 5 + 2) * (8 * 7 + 7 * 3))
        9 * 9 * (6 + (2 * 9 + 4 * 8 + 6) * 2 + 5) + (7 * 3 * 7 * 4)
        4 * ((5 * 2 + 9) + 9) * 2 * 3 + (2 + (4 + 4 * 7) * 2 + 6)
        3 + 6 + (8 * 7 * (7 * 8) + 3) + 5
        (6 + (9 + 8 + 3 * 8 + 8 + 7) * (4 * 3 + 4 * 3) * 6 + (9 * 8 * 2)) * (6 * 5 + 4 * 4) * 6
        ((9 * 3 + 3 * 5 * 9) * 3 * 2 * 5 * 4 + 9) + 2 * 5 + 5 * 8 * 6
        7 * 9 + 4 * ((3 + 7 + 2) + (8 + 7 + 9 * 8 * 6 * 2))
        (5 * (3 + 5) * 3 * (3 + 6 + 3 + 4) + 8 + 9) + 9 + 6 * 4
        3 + 9 * (3 + (4 + 7) + 2 + 3 + 7) * 8 * 6
        (5 * 7 + 4 + 7 + (5 + 4 * 4 * 6 + 6)) + (9 + 3 + 2 + 2) + ((3 + 2 + 9 + 7 * 2 * 3) + 8 * 2 * 2 + 9 * 3)
        3 + 7 + ((5 * 7) + 7 + 3 * (7 + 5 + 8) + (9 + 8 * 8) + 7)
        5 * ((5 + 8 * 3 * 7) + 2 * 7 * 5 + (4 + 8 + 3) + 3)
        (3 + 9 + 4) * ((3 * 6) + 5 * 7 * 6)
        8 * 7
        (5 * (2 + 9 + 4) + 8 * (8 + 7 * 7 + 5) + 6 * (2 + 4 * 7)) * 8 + 9
        (4 + (3 + 7 * 4 * 2 * 7 + 8)) * 9 * 6
        6 + 7 + 9 * (9 * 2 * 6) * 6 + 2
        7 * 5 + (5 * 3 + 9 * 6 + (9 * 5 * 2 * 3) + 7)
        3 * 5 + 7 + 2 + 3 * ((8 + 5 * 2 * 6 * 5) * (4 + 4 + 7 * 9 + 8 * 4) + (2 * 9 + 2 * 2 + 8))
        (9 + 7 * 9 * 2) + 8 * 6
        (9 * (7 + 8 + 9 + 5 + 5) * 2) * 3 + 5 + (7 * (6 * 8 + 9 * 4 * 4 + 8) + 6 + 6 * (9 + 8 + 4 + 6)) + 2
        (3 * 9) + 4 * 9
        4 + 7 * ((8 * 2 * 6 + 8 + 7 * 2) * 2)
        2 * (6 + 3) + 4 + 7 * 4
        (2 * 8 + 9) + (2 + 6) + (4 * 6)
        7 * 2 + 9 + 7 * 3 + ((5 * 5 * 3) + 3 * 8 * 6 + 2 + 7)
        ((2 + 6) + (7 * 4 * 8 * 7 * 3) * (2 + 8 * 4) * 5 + 6 * 2) * (4 + 7 + 2 + 8 * (3 + 8) * 8) + (7 + 8 + 3 + 3) + 9 + 4
        (3 * 4 * (9 + 4 + 6 * 7) + 2 + 2 + 8) + 4 + 6
        (4 * (4 * 3 + 2 + 9) * 4) + 2 * 6 * 3 + 8 + 5
        (3 + 9 + 7) * 8 + 9 + (4 * (7 + 7 + 8 + 7) * 8 * 3 + 5)
        5 * 2 * (5 + 9 + 6 + (6 + 6) * 2 + 7)
        7 * 7 + (2 + 2 * 5 * 6 + 2) + 4
        8 * (2 + (9 * 2 + 2 + 7 + 7)) + 8 + 7 + 5 + 7
        (5 + (9 * 8 * 3) * (2 * 2 + 8 + 8 * 5) + 7 * 3 + (8 + 9 + 2 + 6 + 3 + 7)) * 9
        (4 + 8 + 9) + (6 + 3 * 4 * (4 + 2 + 4 * 2 + 8 + 2) + 8 * 3) + 5
        6 + 3 + 2 + (2 + 6 + 7 + 2 + (7 + 3 * 9 + 3 * 5))
        4 + 7 * 2 + 8 * 2
        7 * 6 + 4
        (2 * (5 * 3) * 9 * 3) * (3 + 7 + 6 * 5) * 4 * 9
        3 + 9 * 2 + (8 * 4 + 8 * (3 + 3 + 2 * 3) + (9 + 5 * 8 * 6))
        8 * (8 * 2 + 4 * 4 * 6) * 9 + 5 + 4
        2 + 8 + (4 * 7 + (2 * 9 * 2 + 4 * 5 + 7) * 9 * 8 * 3) * 5 + 7 * 3
        8 * 5 + 7 * 5 + (7 * (5 + 8) * 5 * (3 * 7 * 2 * 3 + 2)) + 5
        8 * (2 * (5 + 3 * 6)) + 2 * ((7 * 6 * 7 + 2 * 2) + 8) * 6
        ((9 + 8 + 7 * 6 * 7 * 9) + (9 + 6 * 4 + 9 * 4 + 2) * (6 + 4 + 6 + 9 * 4)) * 7 * 8 * ((8 * 4 * 9 * 5 + 6 * 6) + 7 * 3 * 3 * (2 + 4 * 4))
        4 + (8 * 7 * (9 + 6 * 8 + 8) * 7 * 4) + 2 * ((4 * 4 + 7 * 9 * 8 + 3) + 7 + 3 * 9 * 3) + 6
        6 + ((5 * 2 + 9 + 9 + 7 * 7) * (2 + 9 + 6 * 8) + 9) * 3
        (6 + 6 + 9 * (8 * 5 * 3 + 3 + 2) * 8) * 5 + 8 * (3 + 6 + 8 * 9 + (5 + 3 + 7)) * 5
        8 * ((8 + 3 + 5) + 5 * 4 * 6) * ((7 * 3 * 2 * 7 + 8 + 8) * 7 + 9 * 5 + 2) * 8
        9 * ((6 + 3 + 3) + 4 * 3) + 6
        9 + ((9 * 8 + 3 + 5 + 6 + 3) * (7 * 5 * 6 + 5 + 6) * 5 + 8) * 4 + 8 + 6
        2 * 4 * 2 * (8 + (7 * 5) + 8 * 3) * 7
        8 + (6 * 8) * 9 * 2 + 3 * 7
        (4 * 3 * 2 + 8) * (8 + (5 * 2 * 7) + 5 + (6 + 8 * 4 * 9 + 5 + 5) * 4) * 2 * 3 * 2 + 5
        9 + 5 * 9 + (3 + 4) + (5 * 6 + 5)
        9 * 9 * ((9 * 9) * 5 * 6 + 4 + 3) + 8 + 8 + (4 + 4 * 4 * (3 * 7 + 7 + 9 + 5 * 3))
        9 + (3 * 2) + 2
        ((3 + 7 + 5 * 8) + 3 * 5 + 2 + 2) * (5 + 7 + 5) * (2 * 3 + 8 + 8 * (9 * 3 + 6 + 7 * 7))
        ((8 + 3 + 2) * 9) * 5 * 9 * 8 * 3 + 8
        2 + 8 + 4 + 2 * 2
        (8 * 9) + 9
        6 + (4 * 8)
        (5 + 9 * 7) * 9 + ((9 + 9) + 6 + 3 + 8) * (9 + 9 * (6 + 9))
        ((6 * 6 + 8 * 6) + 2 * (6 * 6) * (3 * 9 + 7 + 9 * 8) + 3) * (8 * (2 + 7 + 9 * 8) * 2) + 4 + 7 * 6
        7 * (7 * 3 * 9 + 7) + (4 * 9 + (5 + 3 + 5) * 7) + (5 + 3 * 3 + 2) * 2
        (6 * (2 * 7 * 3)) + 5
        8 * ((7 * 4 * 4 * 3) * 3 * 5 + 6 + (2 * 5 + 5 + 2 * 8) * 9)
    """.trimIndent()

}